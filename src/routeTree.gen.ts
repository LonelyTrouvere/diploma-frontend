/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as SignupImport } from './routes/signup'
import { Route as LoginImport } from './routes/login'
import { Route as IndexImport } from './routes/index'
import { Route as GroupsIndexImport } from './routes/groups/index'
import { Route as GroupsIdIndexImport } from './routes/groups/$id/index'
import { Route as GroupsMeetingMeetingIdImport } from './routes/groups/meeting/$meetingId'
import { Route as GroupsIdSettingsImport } from './routes/groups/$id/settings'
import { Route as GroupsIdTopicIdImport } from './routes/groups/$id/$topicId'

// Create/Update Routes

const SignupRoute = SignupImport.update({
  id: '/signup',
  path: '/signup',
  getParentRoute: () => rootRoute,
} as any)

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const GroupsIndexRoute = GroupsIndexImport.update({
  id: '/groups/',
  path: '/groups/',
  getParentRoute: () => rootRoute,
} as any)

const GroupsIdIndexRoute = GroupsIdIndexImport.update({
  id: '/groups/$id/',
  path: '/groups/$id/',
  getParentRoute: () => rootRoute,
} as any)

const GroupsMeetingMeetingIdRoute = GroupsMeetingMeetingIdImport.update({
  id: '/groups/meeting/$meetingId',
  path: '/groups/meeting/$meetingId',
  getParentRoute: () => rootRoute,
} as any)

const GroupsIdSettingsRoute = GroupsIdSettingsImport.update({
  id: '/groups/$id/settings',
  path: '/groups/$id/settings',
  getParentRoute: () => rootRoute,
} as any)

const GroupsIdTopicIdRoute = GroupsIdTopicIdImport.update({
  id: '/groups/$id/$topicId',
  path: '/groups/$id/$topicId',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/signup': {
      id: '/signup'
      path: '/signup'
      fullPath: '/signup'
      preLoaderRoute: typeof SignupImport
      parentRoute: typeof rootRoute
    }
    '/groups/': {
      id: '/groups/'
      path: '/groups'
      fullPath: '/groups'
      preLoaderRoute: typeof GroupsIndexImport
      parentRoute: typeof rootRoute
    }
    '/groups/$id/$topicId': {
      id: '/groups/$id/$topicId'
      path: '/groups/$id/$topicId'
      fullPath: '/groups/$id/$topicId'
      preLoaderRoute: typeof GroupsIdTopicIdImport
      parentRoute: typeof rootRoute
    }
    '/groups/$id/settings': {
      id: '/groups/$id/settings'
      path: '/groups/$id/settings'
      fullPath: '/groups/$id/settings'
      preLoaderRoute: typeof GroupsIdSettingsImport
      parentRoute: typeof rootRoute
    }
    '/groups/meeting/$meetingId': {
      id: '/groups/meeting/$meetingId'
      path: '/groups/meeting/$meetingId'
      fullPath: '/groups/meeting/$meetingId'
      preLoaderRoute: typeof GroupsMeetingMeetingIdImport
      parentRoute: typeof rootRoute
    }
    '/groups/$id/': {
      id: '/groups/$id/'
      path: '/groups/$id'
      fullPath: '/groups/$id'
      preLoaderRoute: typeof GroupsIdIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/signup': typeof SignupRoute
  '/groups': typeof GroupsIndexRoute
  '/groups/$id/$topicId': typeof GroupsIdTopicIdRoute
  '/groups/$id/settings': typeof GroupsIdSettingsRoute
  '/groups/meeting/$meetingId': typeof GroupsMeetingMeetingIdRoute
  '/groups/$id': typeof GroupsIdIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/signup': typeof SignupRoute
  '/groups': typeof GroupsIndexRoute
  '/groups/$id/$topicId': typeof GroupsIdTopicIdRoute
  '/groups/$id/settings': typeof GroupsIdSettingsRoute
  '/groups/meeting/$meetingId': typeof GroupsMeetingMeetingIdRoute
  '/groups/$id': typeof GroupsIdIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/signup': typeof SignupRoute
  '/groups/': typeof GroupsIndexRoute
  '/groups/$id/$topicId': typeof GroupsIdTopicIdRoute
  '/groups/$id/settings': typeof GroupsIdSettingsRoute
  '/groups/meeting/$meetingId': typeof GroupsMeetingMeetingIdRoute
  '/groups/$id/': typeof GroupsIdIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/login'
    | '/signup'
    | '/groups'
    | '/groups/$id/$topicId'
    | '/groups/$id/settings'
    | '/groups/meeting/$meetingId'
    | '/groups/$id'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/login'
    | '/signup'
    | '/groups'
    | '/groups/$id/$topicId'
    | '/groups/$id/settings'
    | '/groups/meeting/$meetingId'
    | '/groups/$id'
  id:
    | '__root__'
    | '/'
    | '/login'
    | '/signup'
    | '/groups/'
    | '/groups/$id/$topicId'
    | '/groups/$id/settings'
    | '/groups/meeting/$meetingId'
    | '/groups/$id/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  LoginRoute: typeof LoginRoute
  SignupRoute: typeof SignupRoute
  GroupsIndexRoute: typeof GroupsIndexRoute
  GroupsIdTopicIdRoute: typeof GroupsIdTopicIdRoute
  GroupsIdSettingsRoute: typeof GroupsIdSettingsRoute
  GroupsMeetingMeetingIdRoute: typeof GroupsMeetingMeetingIdRoute
  GroupsIdIndexRoute: typeof GroupsIdIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  LoginRoute: LoginRoute,
  SignupRoute: SignupRoute,
  GroupsIndexRoute: GroupsIndexRoute,
  GroupsIdTopicIdRoute: GroupsIdTopicIdRoute,
  GroupsIdSettingsRoute: GroupsIdSettingsRoute,
  GroupsMeetingMeetingIdRoute: GroupsMeetingMeetingIdRoute,
  GroupsIdIndexRoute: GroupsIdIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/login",
        "/signup",
        "/groups/",
        "/groups/$id/$topicId",
        "/groups/$id/settings",
        "/groups/meeting/$meetingId",
        "/groups/$id/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/signup": {
      "filePath": "signup.tsx"
    },
    "/groups/": {
      "filePath": "groups/index.tsx"
    },
    "/groups/$id/$topicId": {
      "filePath": "groups/$id/$topicId.tsx"
    },
    "/groups/$id/settings": {
      "filePath": "groups/$id/settings.tsx"
    },
    "/groups/meeting/$meetingId": {
      "filePath": "groups/meeting/$meetingId.tsx"
    },
    "/groups/$id/": {
      "filePath": "groups/$id/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
